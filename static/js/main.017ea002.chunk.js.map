{"version":3,"sources":["components/card/Card.js","components/card-list/CardList.js","components/search-box/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","monster","name","src","id","email","CardList","monsters","map","index","SearchBox","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","data","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAgBeA,EAbF,SAACC,GACZ,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAKF,EAAMG,QAAQC,KACnBC,IAAG,+BAA0BL,EAAMG,QAAQG,GAAxC,4BAEL,6BAA4BN,EAAMG,QAAQC,MAAjCJ,EAAMG,QAAQG,IACvB,4BAA8BN,EAAMG,QAAQI,OAApCP,EAAMG,QAAQI,WCIbC,G,MAVE,SAACR,GAChB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,EAASQ,GAAV,OAClB,cAAC,EAAD,CAAuBR,QAASA,GAArBA,EAAQG,WCOZM,G,MAbG,SAACZ,GACjB,OACE,qBAAKC,UAAU,aAAf,SACE,uBACEA,UAAU,SACVY,KAAK,SACLC,YAAY,qBACZC,SAAUf,EAAMgB,mBCoCTC,G,wDAtCb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAiBRgB,aAAe,SAACE,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJE,E,qDAQnB,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJ,EAAKT,SAAS,CACZV,SAAUmB,S,oBASlB,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAmBrB,EAASsB,QAAO,SAAC5B,GAAD,OACvCA,EAAQC,KAAK4B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK/B,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CAAWe,aAAca,KAAKb,eAC9B,cAAC,EAAD,CAAUP,SAAUqB,W,GAjCVI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.017ea002.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n  return (\n    <div className='card-container'>\n      <img\n        alt={props.monster.name}\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h2 key={props.monster.id}>{props.monster.name}</h2>\n      <p key={props.monster.email}>{props.monster.email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from '../card/Card';\n\nimport './CardList.css';\n\nconst CardList = (props) => {\n  return (\n    <div className='card-list'>\n      {props.monsters.map((monster, index) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = (props) => {\n  return (\n    <div className='search-box'>\n      <input\n        className='search'\n        type='search'\n        placeholder='Search monsters...'\n        onChange={props.handleChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\n\nimport CardList from './components/card-list/CardList';\nimport SearchBox from './components/search-box/SearchBox';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          monsters: data,\n        })\n      );\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1>Robohash Party</h1>\n        <SearchBox handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}